#!/usr/bin/env bash

CUR_PATH="$(dirname "${BASH_SOURCE[0]}")"
# shellcheck source=./common.sh
source "${CUR_PATH}/common.sh"

if [[ -f "${PASSWORD_SECRET_MOUNT_PATH}/${PGUSER}" ]]; then
  PGPASSWORD="$(cat "${PASSWORD_SECRET_MOUNT_PATH}/${PGUSER}")"
  export PGPASSWORD
fi

function log() {
  echo "${LOGGING_PREFIX}" "$@"
}

log:info "Waiting for database to be ready..."
"${CUR_PATH}/wait_for_connection" "${EXTERNAL_SERVICE}" "${PG_PORT}"
assert $? "Aborted, timed out while waiting for database to be ready @" "${EXTERNAL_SERVICE}:${PG_PORT}" || exit $?

function is_initialized() {
  if [ "$( psql -tAc "SELECT 1 FROM pg_database WHERE datname='${OPERATOR_DATABASE}'" )" = '1' ]
  then
      return 1
  else
      return 0
  fi
}

function initialize_pgxl_state() {
  psql -c "
DROP DATABASE IF EXISTS ${OPERATOR_DATABASE};
  " || true
  psql -c "
CREATE DATABASE ${OPERATOR_DATABASE};
  " || return $?
}

function run_scripts_that_match() {
  local PATTERN="$1"
  local SRC_PATH
  SRC_PATH="$(realpath "$2")"

  log:info "Searching for and executing scripts that match PATTERN '${PATTERN}' in folder '${SRC_PATH}'"
  local LOAD_SCRIPTS
  LOAD_SCRIPTS="$(find "${SRC_PATH}" -maxdepth 1 -name "${PATTERN}" | sort)"
  LOAD_SCRIPTS=(${LOAD_SCRIPTS})

  local IS_FOUND="0"

  for FPATH in "${LOAD_SCRIPTS[@]}"; do
    IS_FOUND="1"

    local FNAME
    FNAME=$(basename "${FPATH}")
    local FILEEXT
    FILEEXT=${FNAME##*.}

    case ${FILEEXT} in
    sh)
      log:info "Executing bash script ${FPATH}:"
      "${FPATH}"
      assert $? "Failed when executing init script file ${FPATH}. Exiting... " || return $?
      ;;
    sql)
      log:info "Calling psql to execute script in ${FPATH}:"
      local LOAD_SCRIPTS_SQL
      LOAD_SCRIPTS_SQL=$(cat "${FPATH}")
      psql -c "$LOAD_SCRIPTS_SQL"
      assert $? "Failed when executing init script file ${FPATH}. Exiting... " || return $?
      ;;
    *)
      log:warning "Cannot invoke filename with extension ${FILEEXT}, skipping. Allowed extensions [sql, sh]"
      ;;
    esac
  done

  if [ "${IS_FOUND}" -eq "0" ]; then
    log:info "No scripts found."
  else
    log:info "Done."
  fi
}

pg_isready
assert $? "Database Port is ready but database is not (pg_isready failed) @" "${EXTERNAL_SERVICE}:${PG_PORT}" || exit $?

is_initialized
DB_ALREADY_INITIALIZED=$?

if [ "${DB_ALREADY_INITIALIZED}" -eq "0" ]; then
  log:info "Database has not been initialized, calling init scripts.."

  log:info "Invoking init scripts.."
  run_scripts_that_match "init_*" "/load_scripts"
  assert $? "Initialization scripts failed, exiting." || exit $?

  log:info "Creating db postgres-xl-helm state tables"
  initialize_pgxl_state
  assert $? "Failed to initialize database for postgres-xl helm chart state." || exit $?
else
  log:info "Database already initialized. Skipping init scripts."
fi

log:info "Invoking startup scripts.."
run_scripts_that_match "startup_*" "/load_scripts"
assert $? "Startup scripts failed, exiting." || exit $?
