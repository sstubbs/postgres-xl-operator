#!/usr/bin/env bash
# Script to register the nodes in postgres
cur_path="$(dirname "${BASH_SOURCE[0]}")"
source "$cur_path/common.sh"

source "$cur_path/initialize_env_dependencies"

function wait_for_postgres() {
  while true; do
    pg_isready &>/dev/null
    if [ $? -eq 0 ]; then
      break
    else
      log:info "Waiting for database to be ready.."
      sleep $PORT_WAIT_INTERVAL
    fi
  done
}

log:info "Registering cluster nodes on $POD_NAME.."

function register_node() {
  local type=$1
  local idx=$2
  case "$type" in
  datanode)
    node_full_name="${DATANODE_BASENAME}-${idx}"
    node_host="local-alias-dn-$i"
    node_name="DN_$i"
    ;;
  coordinator)
    node_full_name="${COORDINATOR_BASENAME}-${idx}"
    node_host="local-alias-crd-$i"
    node_name="CN_$i"
    ;;
  *)
    assert 1 "Register node is defined only for datanodes and coordinators" || exit $?
    ;;
  esac

  wait_for_postgres || return $?

  local cmd="CREATE"
  local host_ip="$POD_IP"
  if [ "$node_full_name" = "$POD_NAME" ]; then
    cmd="ALTER"
    log:info "Registering self.."
  else
    while true; do
      host_ip=$(getent hosts "$node_host" | awk '{ print $1 }')
      if [ -z "$host_ip" ]; then
        log:info "Waiting for host to be ready @ $node_host ..."
        sleep $PORT_WAIT_INTERVAL
      else
        break
      fi
    done
  fi
  log:info "Resolved $node_host -> $host_ip, registering node on local as $type:"

  local sql_script="$cmd NODE $node_name WITH (TYPE = '$type', HOST = '$node_host', PORT = $PG_PORT);"
  log:script "$sql_script"
  psql -c "$sql_script"
  assert_warn $? "Failed executing sql script. Is node already defined? Node register skipped."
}

function main(){
  # must be in a function so it can be called in parallel
  # (will not affect main script)

  # registering datanodes.
  for i in $(seq 0 $DATANODE_COUNT); do
    if [ $i -eq $DATANODE_COUNT ]; then break; fi
    register_node datanode $i
    assert $? "Failed to register datanodes" || return $?
  done

  for i in $(seq 0 $COORDINATOR_COUNT); do
    if [ $i -eq $COORDINATOR_COUNT ]; then break; fi
    register_node coordinator $i
    assert $? "Failed to register coordinator" || return $?
  done

  log:info "Reloading pool...  "
  psql -q -c "SELECT pgxc_pool_reload();"
  assert $? "Failed to reload node pool" || return $?
  log:info "Registered node list:  "
  psql -q -c "SELECT * FROM pgxc_node"
  assert $? "Failed to reload node pool" || return $?

  log:info "Setting state to active."
  echo "$(date)" >>~/service_activation_time
  assert $? "Failed generate activation file stamp" || return $?
  log:info "Node ready."
}

main
