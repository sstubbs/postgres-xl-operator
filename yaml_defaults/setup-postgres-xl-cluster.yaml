# This is a YAML-formatted file.
# Declare variables to be passed into your crd.

# The default postgres-xl image to use in all pods.
image: pavouk0/postgres-xl:XL_10_R1_1-6-g68c378f-4-g7a65119
# This is the env set that appends to all pods.
# will not affect the db configuration.
envs:
# add extra labels to all pods.
extra_labels:
# the home directory depends on the image and will determine the
# data storage location. the use postgres must have access to this directory.
homedir: /var/lib/postgresql
# The env set that appends to all pods.
# may affect the db configuration.
override_envs:

# general config.
config:
  # The log level to use, accepts : ERROR, WARNING, INFO, DEBUG, DEBUG (1-5).
  log_level: warning
  # the port for managers (GTM and proxy).
  managers_port: 6666
  # the internal database port (postgres).
  postgres_port: 5432
  # the root user.
  postgres_user: postgres
  # Append to the various config files.
  append:
    # append to gtm.
    gtm:
    # append to all proxies.
    proxy:
    # append to all datanodes.
    datanode:
    # append to all coordinators.
    coordinator:

# applies only to datanodes. Coordinators
# are not stored, and are only considered part
# of the cluster configuration.
wal:
  archive:
    # enable wal archiving.
    enable: false
    # default value for versions.
    # TODO: add WAL auto versioning on datanode init
    # will allow restore points.
    version: unversioned
    # will default to storage.
    storage_path: /wal_archive
    # if dose not exist will default to empty folder.
    pvc:

security:
  # If exists will load all passwords from secrets.
  passwords_secret_name:
  # If passwords_secret_name exists, is the name of the secret
  # key. Otherwise the password.
  pg_password:
  # Set the password authentication method.
  postgres_auth_type: md5
  
# the coordinators external service.
service:
  enabled: true
  port: 5432
  service_type: LoadBalancer  

# Configuration for a job that is called when the database
# has finished loading.
on_load:
  enabled: false
  # the number of times the job will restart.
  back_off_limit: 5
  # if set, will determine the startup script resources.
  resources:
    limits:
      memory: 250Mi
      cpu: 250m

  # array of startup scripts, to be called whenever
  # the database is loaded.
  startup:
    # Examples (One script is needed otherwise there will be an error which is why test_startup.sh is added)
    #  create_database.sh: |-
    #    psql -c "CREATE DATABASE tester;"
    #    export PGDATABASE="tester"
    #  create_database2.sh: |-
    #    CREATE SCHEMA test;
    #    CREATE TABLE test.lama as (SELECT 'the brown rabbit' as col_1);
#    test_startup.sh: |-
#      echo "test startup script"
    - name: create_database.sh
      script: |-
        psql -c "CREATE DATABASE tester;"
        export PGDATABASE="tester"

  # array of init scripts to be called only when the
  # the database is first initialized.
  init:
    # Examples (One script is needed otherwise there will be an error which is why test_init.sh is added)
    #  create_database.sh: |-
    #    psql -c "CREATE DATABASE tester;"
    #    export PGDATABASE="tester"
    #  create_database2.sh: |-
    #    CREATE SCHEMA test;
    #    CREATE TABLE test.lama as (SELECT 'the brown rabbit' as col_1);    # Examples (One script is needed otherwise there will be an error which is why this is added)
#    test_init.sh: |-
#      echo "test init script"
    - name: create_database.sh
      script: |-
        psql -c "CREATE DATABASE tester;"
        export PGDATABASE="tester"

gtm:
  resources:
    limits:
      memory: 2Gi
      cpu: 2
  pvc:
    resources:
      requests:
        storage:
  # addons
  add_containers:
  volumes:
  volume_mounts:
  # overrides
  inject_main_container_yaml:
  inject_dep_yaml:
  inject_sts_yaml:

proxies:
  enabled: true
  count: 1
  thread_count: 3
  resources:
    limits:
      memory: 1Gi
      cpu: 1
  # addons
  add_containers:
  volumes:
  volume_mounts:
  # overrides
  inject_main_container_yaml:
  inject_spec_yaml:
  inject_sts_yaml:

coordinators:
  count: 1
  resources:
    limits:
      memory: 1Gi
      cpu: 1
  pvc:
    resources:
      requests:
        storage:
  # addons
  add_containers:
  volumes:
  volume_mounts:
  # overrides
  inject_main_container_yaml:
  inject_spec_yaml:
  inject_sts_yaml:

datanodes:
  count: 1
  resources:
    limits:
      memory: 1Gi
      cpu: 1
  pvc:
    resources:
      requests:
        storage:
  # addons
  add_containers:
  volumes:
  volume_mounts:
  add_volume_claims:
  # overrides
  inject_main_container_yaml:
  inject_spec_yaml:
  inject_sts_yaml: