# This is a YAML-formatted file.
# Declare variables to be passed into your crd.

image:
  # The default postgres-xl image to use in all pods.
  name: pavouk0/postgres-xl
  # The default postgres-xl image version to use in all pods.
  version: XL_10_R1_1-6-g68c378f-4-g7a65119

replication:
  enabled: false
  # Do not set master_name as this is automatically set.
  master_name: ""
  # Set this to the name of the standby you want to create that is replicated from this created, modified and deleted when this is and replicated from it.
  standby_name: ""

health_check:
  enabled: false
  # This is the the health check database that will be automatically created.
  database_name: "health_checks"

envs: []
  # This is the env set that appends to all pods.
  # will not affect the db configuration.
  # - name: TEST_ENV_VARIABLE
  #   content: "testing 123"
extra_labels: []
  # add extra labels to all pods.
  # - name: test_label
  #   content: test_label

# the home directory depends on the image and will determine the
# data storage location. the use postgres must have access to this directory.
homedir: /var/lib/postgresql
override_envs: []
  # The env set that appends to all pods.
  # may affect the db configuration.
  # - name: TEST_ENV_VARIABLE
  #   content: "testing 123"

# general config.
config:
  # The log level to use, accepts : ERROR, WARNING, INFO, DEBUG, DEBUG (1-5).
  log_level: warning
  # the port for managers (GTM and proxy).
  managers_port: 6666
  # the internal database port (postgres).
  postgres_port: 5432
  # the root user.
  postgres_user: postgres
  # Append to the various config files.
  append:
    gtm: []
    # append to gtm.
    # - name: max_connections
    #   content: 100
    proxy: []
    # append to all proxies.
    # - name: max_connections
    #   content: 100
    datanode: []
    # append to all datanodes.
    # - name: max_connections
    #   content: 100
    coordinator: []
    # append to all coordinators.
    # - name: max_connections
    #   content: 100

# applies only to datanodes. Coordinators
# are not stored, and are only considered part
# of the cluster configuration.
wal:
  archive:
    # enable wal archiving.
    enable: false
    # default value for versions.
    # TODO: add WAL auto versioning on datanode init
    # will allow restore points.
    version: unversioned
    # will default to storage.
    storage_path: /wal_archive
    # if does not exist will default to empty folder.
    pvc:
      resources:
        requests:
          storage: ""

security:
  # If exists will load all passwords from secrets.
  passwords_secret_name: ""
  # If passwords_secret_name exists, is the name of the secret
  # key. Otherwise the password.
  pg_password: ""
  # Set the password authentication method.
  postgres_auth_type: md5
  
# the coordinators external service.
service:
  enabled: true
  port: 5432
  service_type: ClusterIP

# Configuration for a job that is called when the database
# has finished loading.
on_load:
  enabled: false
  # the number of times the job will restart.
  back_off_limit: 5
  # if set, will determine the startup script resources.
  resources:
    requests:
      memory: 250Mi
      cpu: 0.25
    limits:
      memory: 4Gi
      cpu: 2.00

  # array of startup scripts, to be called whenever
  # the database is loaded.
  startup: []
    # - name: create_database.sh
    #   content: |-
    #     psql -c "CREATE DATABASE tester;"
    #     export PGDATABASE="tester"
    # - name: create_base_tables.sql
    #   content: |-
    #     CREATE SCHEMA test;
    #     CREATE TABLE test.lama as (SELECT 'the brown rabbit' as col_1);

  # array of init scripts to be called only when the
  # the database is first initialized.
  init: []
    # - name: create_database.sh
    #   content: |-
    #     psql -c "CREATE DATABASE tester;"
    #     export PGDATABASE="tester"
    # - name: create_base_tables.sql
    #   content: |-
    #     CREATE SCHEMA test;
    #     CREATE TABLE test.lama as (SELECT 'the brown rabbit' as col_1);

  # addons
  add_containers: ""
  volumes: ""
  volume_mounts: ""
  # overrides
  inject_main_container_yaml: ""
  inject_spec_yaml: ""
  inject_job_yaml: ""

gtm:
  resources:
    requests:
      memory: 250Mi
      cpu: 0.25
    limits:
      memory: 4Gi
      cpu: 2.00
  pvc:
    resources:
      requests:
        storage: ""
  # addons
  add_containers: ""
  volumes: ""
  volume_mounts: ""
  add_volume_claims: ""
  # overrides
  inject_main_container_yaml: ""
  inject_spec_yaml: ""
  inject_sts_yaml: ""

proxies:
  enabled: true
  count: 1
  thread_count: 3
  resources:
    requests:
      memory: 250Mi
      cpu: 0.25
    limits:
      memory: 4Gi
      cpu: 2.00
  # addons
  add_containers: ""
  volumes: ""
  volume_mounts: ""
  add_volume_claims: ""
  # overrides
  inject_main_container_yaml: ""
  inject_spec_yaml: ""
  inject_sts_yaml: ""

coordinators:
  count: 1
  resources:
    requests:
      memory: 250Mi
      cpu: 0.25
    limits:
      memory: 4Gi
      cpu: 2.00
  pvc:
    resources:
      requests:
        storage: ""
  # addons
  add_containers: ""
  volumes: ""
  volume_mounts: ""
  add_volume_claims: ""
  # overrides
  inject_main_container_yaml: ""
  inject_spec_yaml: ""
  inject_sts_yaml: ""

datanodes:
  count: 1
  resources:
    requests:
      memory: 250Mi
      cpu: 0.25
    limits:
      memory: 4Gi
      cpu: 2.00
  pvc:
    resources:
      requests:
        storage: ""
  # addons
  add_containers: ""
  volumes: ""
  volume_mounts: ""
  add_volume_claims: ""
  # overrides
  inject_main_container_yaml: ""
  inject_spec_yaml: ""
  inject_sts_yaml: ""